import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'application'
}

group = 'org.citygml4j.tools'
version = '2.4.0'
description = 'Collection of tools for processing CityGML files'

ext {
    date = new Date()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    maven {
        url = 'https://repo.osgeo.org/repository/release'
    }
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
}

dependencies {
    implementation 'org.citygml4j:citygml4j-xml:3.2.4'
    implementation 'org.citygml4j:citygml4j-cityjson:3.2.4'
    implementation 'info.picocli:picocli:4.7.7'
    implementation 'org.geotools:gt-epsg-extension:33.0'
    implementation 'org.geotools:gt-epsg-hsql:33.0'
    implementation 'org.geotools:gt-referencing:33.0'
    implementation 'org.apache.commons:commons-imaging:1.0.0-alpha5'
    runtimeOnly 'com.fasterxml.woodstox:woodstox-core:7.1.0'
    runtimeOnly 'net.sf.saxon:Saxon-HE:12.5'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

processResources {
    outputs.upToDateWhen { false }
    filteringCharset = 'ISO-8859-1'
    def appName = project.name
    filesMatching('**/application.properties') {
        filter(ReplaceTokens, tokens: [
                name: appName,
                version: version
        ])
    }
}

application {
    mainClass = 'org.citygml4j.tools.CityGMLTools'
    executableDir = ''

    startScripts {
        doLast {
            def windows = getWindowsScript()
            def unix = getUnixScript()
            windows.text = windows.text.replaceFirst('set APP_HOME=.*', '$0\r\nset WORKING_DIR=%CD%')
            unix.text = unix.text.replaceFirst('\nCLASSPATH=.*',
                    '$0\n\nexport APP_HOME\nexport WORKING_DIR=\\$(pwd -P)')
        }
    }
}

distributions.main.contents {
    from 'README.md'
    into('license') {
        from 'LICENSE'
    }
    into('lib') {
        from('resources/logging.properties')
    }
    from(file("$projectDir/build/tmp/dir")) {
        mkdir "$projectDir/build/tmp/dir/extensions"
    }
}